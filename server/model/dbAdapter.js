// Generated by CoffeeScript 1.10.0
(function() {
  var db;

  db = (function() {
    var Firebird, options;

    Firebird = require('node-firebird');

    options = {};

    options.host = '127.0.0.1';

    options.port = 3050;

    options.database = "d:\\svn\\github\\MoneyTracker\\MT.FDB";

    options.user = 'SYSDBA';

    options.password = 'masterkey';

    function db() {
      console.log("Create object dbAdapter");
    }

    db.prototype.send = function(list, callback) {
      var commit, i, len, obj;
      commit = this.commit;
      for (i = 0, len = list.length; i < len; i++) {
        obj = list[i];
        this.prepareStatement(obj, function(st) {
          var error;
          console.log(st.statement);
          if (st.err) {
            error = "Can't send object to db";
            console.log(error);
            return callback({
              err: error
            });
          } else {
            commit(obj, function(err) {
              if (err) {
                error = "Commit to db failed";
                console.log(error);
                return callback({
                  err: error
                });
              } else {
                return callback();
              }
            });
          }
        });
      }
    };

    db.prototype.prepareStatement = function(obj, callback) {
      var error;
      if (true) {
        return callback({
          statement: 'INSERT AAA'
        });
      } else {
        error = 'Prepare statement error';
        console.log(error);
        return callback({
          err: error
        });
      }
    };

    db.prototype.commit = function(obj, callback) {
      var error;
      if (true) {
        return callback();
      } else {
        error = "Commit error";
        console.log(error);
        return callback({
          err: error
        });
      }
    };

    db.prototype.fbExec = function() {
      return Firebird.attach(options, function(err, db) {
        if (err) {
          throw err;
        }
        return db.query('SELECT * FROM ACCOUNT', function(err, result) {
          if (err) {
            throw err;
          }
          console.log(result);
          return db.detach();
        });
      });
    };

    db.prototype.fbInsert = function() {
      return Firebird.attach(options, function(err, db) {
        var st;
        if (err) {
          throw err;
        }
        st = ["INSERT INTO EXPENSE (ID, TRANSFERDATE, USERMT, TOTALITEMS, OBJVERSION, ACCOUNT, MONEYTYPE, DISC, DISCPERCENT, DISCTYPE, DISCINPRICE, COMMONTRADEPLACE, TOTAL, REMARKS) VALUES (3, '15-FEB-2016', 258, 1410, 1, 257, 257, 0, 0, 1, 0, NULL, 1410, NULL)", "INSERT INTO EXPENSE (ID, TRANSFERDATE, USERMT, TOTALITEMS, OBJVERSION, ACCOUNT, MONEYTYPE, DISC, DISCPERCENT, DISCTYPE, DISCINPRICE, COMMONTRADEPLACE, TOTAL, REMARKS) VALUES (1, '15-FEB-2016', 258, 1410, 1, 257, 257, 0, 0, 1, 0, NULL, 1410, NULL)"];
        return db.query(st[0], function(err, result) {
          if (err) {
            throw err;
          }
          console.log(result);
          return db.detach();
        });
      });
    };

    db.prototype.fbExpense = function(sms) {

      /*sms = {
        "date": "Feb 02 2016",
        "balance": "9400.11",
        "location": "PYATEROCHKA 3156, IVANOVO",
        "user": "Alina",
        "procedure": "Purchase",
        "coast": "453.0"
      }
       */
      return Firebird.attach(options, function(err, db) {
        var id;
        id = {
          Expense: null,
          Item: null,
          Balance: null
        };
        if (err) {
          throw err;
        }
        return db.query("SELECT MAX(ID) FROM EXPENSE", function(err, result) {
          if (err) {
            throw err;
          }
          id.Expense = result[0].MAX;
          console.log(id.Expense);
          return db.query("SELECT MAX(ID) FROM EXPENSEITEM", function(err, result) {
            if (err) {
              throw err;
            }
            id.Item = result[0].MAX;
            console.log(id.Item);
            return db.query("SELECT BALANCE FROM ACCOUNT WHERE ID=2", function(err, result) {
              var st;
              if (err) {
                throw err;
              }
              id.Balance = parseFloat(result[0].BALANCE);
              console.log(id.Balance);
              st = "INSERT INTO EXPENSE (ID, TRANSFERDATE, USERMT, TOTALITEMS, OBJVERSION, ACCOUNT, MONEYTYPE, DISC, DISCPERCENT, DISCTYPE, DISCINPRICE, COMMONTRADEPLACE, TOTAL, REMARKS) VALUES (?,     ?,            1,      ?,         1,          2,      1,      0,      0,            1,        0,          NULL,           ?,  'autoinsert')";
              return db.query(st, [id.Expense + 1, sms.date, sms.coast, sms.coast], function(err, result) {
                if (err) {
                  throw err;
                }
                console.log(result);
                st = "INSERT INTO EXPENSEITEM (ID, QTY, PRICE, REMARKS, EXPENSE, COMM, TOTAL, TRADEPLACE, DISC, TRANSFERDATE, IDX) VALUES (?, ?, ?,          NULL,      ?,    4474,  ?,        12538,    0,  ?, ?)";
                db.query(st, [id.Item + 1, 1, sms.coast, id.Expense + 1, sms.coast * 1, sms.date, 1], function(err, result) {
                  if (err) {
                    throw err;
                  }
                  console.log(result);
                  st = "UPDATE ACCOUNT SET BALANCE=? WHERE ID=2";
                  return db.query(st, [id.Balance - sms.coast], function(err, result) {
                    if (err) {
                      throw err;
                    }
                    return console.log(result);
                  });
                });

                /*st = "INSERT INTO EXPENSEITEM
                    (ID, QTY, PRICE, REMARKS, EXPENSE, COMM, TOTAL, TRADEPLACE, DISC, TRANSFERDATE, IDX) VALUES
                    (?, ?, ?,          NULL,      ?,    285,  ?,        258,    0,  ?, ?)"
                db.query st, [id.Item + 2, 2, sms.coast, id.Expense, sms.coast * 2, sms.data, 2], (err, result) ->
                  if (err)
                    throw err
                  console.log result
                 */
                return db.detach();
              });
            });
          });
        });
      });
    };

    return db;

  })();

  module.exports = db;

}).call(this);

//# sourceMappingURL=dbAdapter.js.map
