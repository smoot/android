// Generated by CoffeeScript 1.10.0
(function() {
  var SMSDataArray, SMSDataList, addSMSDataTest, express, router;

  express = require('express');

  router = express.Router();

  SMSDataList = (function() {
    var expectedFields, list;

    expectedFields = ['coast', 'location', 'procedure'];

    list = new Array();

    function SMSDataList(options) {
      console.log("Create class SMSDataList");
    }

    SMSDataList.prototype.push = function(obj, callback) {
      console.log("Push start");
      this.validate(obj, function(err) {
        if (err) {
          console.log("Can't push object to array. Field is missing");
          return callback({
            err: "Can't push object to array. Field is missing"
          });
        } else {
          list.push(obj);
          console.log("Add object to array. Total items is " + list.length);
          return callback();
        }
      });
    };

    SMSDataList.prototype.validate = function(obj, callback) {
      var f, field, i, len;
      for (i = 0, len = expectedFields.length; i < len; i++) {
        field = expectedFields[i];
        f = obj[field];
        if (f === null || f === "" || f === void 0) {
          console.log("Field: " + field + " is undefined");
          console.log("Please Fill All Required Field");
          return callback({
            err: "Please Fill All Required Field"
          });
        }
      }
      return callback();
    };

    SMSDataList.prototype.getLength = function(callback) {
      return callback(list.length);
    };

    SMSDataList.prototype.getList = function(callback) {
      return callback(list);
    };

    SMSDataList.prototype.print = function(callback) {
      var SMSData, i, len;
      for (i = 0, len = list.length; i < len; i++) {
        SMSData = list[i];
        console.log(JSON.stringify(SMSData));
      }
      return callback();
    };

    return SMSDataList;

  })();

  addSMSDataTest = function() {
    var objBad1, objBad2, objBad3, objGood1, objGood2, test;
    test = new SMSDataList();
    objGood1 = {
      date: "date",
      coast: "coast",
      location: "loc",
      procedure: "proc"
    };
    objBad1 = {
      date: "date",
      coast: "fdfd",
      location: "loc",
      procedure: ""
    };
    objBad2 = {
      date: "date",
      location: "loc",
      procedure: "proc"
    };
    objGood2 = {
      coast: "coast",
      location: "loc",
      procedure: "proc"
    };
    objBad3 = {};
    console.log("objGood1");
    test.push(objGood1, function(err) {
      if (err) {
        return console.log(err.err);
      }
    });
    console.log("objBad1");
    test.push(objBad1, function(err) {
      if (err) {
        return console.log(err.err);
      }
    });
    console.log("objBad2");
    test.push(objBad2, function(err) {
      if (err) {
        return console.log(err.err);
      }
    });
    console.log("objGood2");
    test.push(objGood2, function(err) {
      if (err) {
        return console.log(err.err);
      }
    });
    console.log("objBad3");
    test.push(objBad3, function(err) {
      if (err) {
        return console.log(err.err);
      }
    });
    test.getLength(function(res) {
      console.log("Total items is " + res);
      if (res !== 2) {
        throw new Error("Test addSMSDataTest FAILED");
      }
    });
    return test;
  };


  /*addSMSDataTest.getList (list) ->
    (console.log JSON.stringify(obj)) for obj in list
   */

  SMSDataArray = new SMSDataList();

  router.post('/*', function(req, res, next) {
    console.log(req.body);
    SMSDataArray.push(req.body, function(err) {
      if (err) {
        throw new Error("Add to array error");
      } else {
        res.statusCode = 200;
        console.log("FOR");
        return SMSDataArray.print(function(err) {
          if (err) {
            throw new Error("print error");
          }
        });
      }
    });
    res.render;
  });

  router.get('/list', function(req, res, next) {
    res.render('index', {
      title: 'Express',
      body: SMSDataArray
    });
  });

  module.exports = router;

}).call(this);

//# sourceMappingURL=update.js.map
